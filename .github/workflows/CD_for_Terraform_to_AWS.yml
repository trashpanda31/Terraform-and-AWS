name: Terraform CD

on:
  push:
    branches: [master]
    paths:
      - 'labs/**/*.tf'
  workflow_dispatch: {}

jobs:
  detect:
    name: Detect changed labs
    runs-on: ubuntu-latest
    outputs:
      labs: ${{ steps.collect.outputs.labs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: collect
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.before }}"
          HEAD="${{ github.sha }}"
          files=$(git diff --name-only "$BASE" "$HEAD" | grep -E '^labs/[^/]+/.+\.tf$' || true)
          if [ -z "$files" ]; then
            echo "labs=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          labs=$(echo "$files" | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "labs=$labs" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint
    needs: detect
    if: ${{ needs.detect.outputs.labs != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lab: ${{ fromJson(needs.detect.outputs.labs) }}
    concurrency:
      group: tf-cd-main-${{ matrix.lab }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: labs/${{ matrix.lab }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: terraform fmt (check)
        run: terraform fmt -check -recursive

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: tflint --init
        run: tflint --init

      - name: tflint
        run: tflint --format compact

      - name: terraform init (no backend)
        run: terraform init -backend=false -input=false

      - name: terraform validate
        run: terraform validate

  apply:
    name: Apply
    needs: [detect, lint]
    if: ${{ needs.detect.outputs.labs != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lab: ${{ fromJson(needs.detect.outputs.labs) }}
    concurrency:
      group: tf-cd-main-${{ matrix.lab }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: labs/${{ matrix.lab }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Check backend variables
        shell: bash
        run: |
          test -n "${{ vars.TF_STATE_BUCKET }}" || (echo "TF_STATE_BUCKET is empty" && exit 1)
          test -n "${{ vars.TF_LOCK_TABLE }}"  || (echo "TF_LOCK_TABLE is empty" && exit 1)

      - name: terraform init (with S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=labs/${{ matrix.lab }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: terraform apply
        run: terraform apply -auto-approve -lock=true -lock-timeout=5m -input=false
